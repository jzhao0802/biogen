var2remove = c('pre_concom_gpif_fst8','pre_concom_gpif_lst8','pre_medication_fst11','pre_medication_lst11','pre_medication_fst13','pre_medication_lst13','pre_concom_gpif_fst8_diff','pre_concom_gpif_lst8_diff','pre_medication_fst11_diff','pre_medication_lst11_diff','pre_medication_fst13_diff','pre_medication_lst13_diff','pre_script_fst_diff','pre_script_lst_dayssup_diff','post_script_lst_dayssup_diff','pre_concom_gpif_num8','pre_medication_num11','pre_medication_num13','pre_concom_ndc_fst4_diff','pre_concom_ndc_lst4_diff')
# eliminate variables based on others type
config$Type[config$Column=='npi'] = 'others'
config$Type[config$Column=='pat_id'] = 'key'
config$Type[config$Column=='yob'] = 'others'
config$Type[config$Column=='yomsg'] = 'others'
config$Type[config$Column=='first_tec_rx'] = 'others'
config$Type[config$Column=='effective_year'] = 'others'
config$var_grouping[ config$Column=='pat_id'] = '' # added this in as the var_grouping info is wrong!
var_others = config$Column[config$Type=='others']
length(var_others)
# EER and number of positivie criteria
table.eliminate = eer_table %>% filter( (eer <0.04 |  `# pos`<=10 ) )
# should get 123
length(unique(  c(table.eliminate$Column, var2remove)))
var2eliminate = unique(  c(table.eliminate$Column, var2remove, var_others) )
length(var2eliminate)
config_ = config %>% filter( !(Column %in% var2eliminate  ))
combined_ = combined %>% select( -one_of(var2eliminate))
length(config$Column)
length(config_$Column)
dim(combined_)
dim(config_)
config_$var_grouping = as.factor(config_$var_grouping)
levels(config_$var_grouping)
remove_na <- function(x) {
x = x[! is.na(x)]
return(x)
}
var_post = remove_na(config_$Column[ config_$var_period=='post' ])
var_hcp = config_$Column [ config_$var_grouping == "Physician Characteritics" ]
var_diff = config_$Column[ str_detect(config_$Column,'_diff') ]
length(var_post)
length(var_hcp)
length(var_diff)
var2eliminate = union( union(var_post, var_hcp), var_diff)
var2eliminate
config_ = config_ %>% filter( !(Column %in% var2eliminate  ))
combined_ = combined_ %>% select( -one_of(var2eliminate))
dim(combined_)
dim(config_)
View(config_)
class_type = as.data.frame( sapply(combined_, class))
is_integer =class_type == "integer"
key = which(config_$Type=="key")
selected_num = which(config_$Type=="numerical" & ! is_integer)
selected_int = which(config_$Type=="numerical" & is_integer)
selected_cat = which(config_$Type=="categorical")
selected_all = c(selected_cat, selected_int, selected_num)
var_stat = c(length(selected_cat), length(selected_num), length(selected_int))
var_stat
sum(var_stat)
dim(config_[c(key,selected_num),])
dim(combined_  %>% select( one_of(config_$Column[c(key,selected_num)])))
write_csv(config_[c(key,selected_num),],
paste0(results_dir, 'modelling_var_config_num.csv'))
combined_num = extreme_values(
combined_  %>% select( one_of(config_$Column[c(key,selected_num)])),
var_config = paste0(results_dir, 'modelling_var_config_num.csv'),
pth = 0.99)
combined_num = combined_num$data %>%   select( - one_of('pat_id'))
combined$tec_activation_group =str_replace(combined$tec_activation_group,'\\r','')
combined$tec_activation_group [ combined$tec_activation_group=="" ] = NA
combined$tec_activation_group = as.factor(combined$tec_activation_group)
levels(combined$tec_activation_group)
var_cat = which(config_$Type=='categorical')
factor2numeric <- function(attribute) {
attribute= as.factor(attribute)
attribute_levels = levels(attribute)
attribute_num = factor(
attribute,
levels = attribute_levels,
labels = sprintf("%03d", 1:length(attribute_levels))
)
attribute_map = hashmap(levels(attribute_num), attribute_levels)
return(list(map=attribute_map, value=attribute_num))
}
write_csv(config_[c(key,selected_cat),],
paste0(results_dir, "modelling_var_config_cat.csv"))
exclude_hcp = TRUE
if (! exclude_hcp) {
mschool = factor2numeric(combined_$medical_school_desc)
combined_$medical_school_desc = mschool$value
saveRDS(mschool$map,'D:/Results/attributes/mschool_map.rds')
specialty = factor2numeric(combined_$specialty)
combined_$specialty = specialty$value
saveRDS(specialty$map,'D:/Results/attributes/specialty_map.rds')
specialty_cat = factor2numeric(combined_$specialty_cat)
combined_$specialty_cat = specialty_cat$value
saveRDS(specialty_cat$map,'D:/Results/attributes/specialty_cat_map.rds')
}
combined_cat = dummy_vars(combined_ %>%
select( one_of(config_$Column[c(key,selected_cat)])),
var_config = paste0(results_dir, 'modelling_var_config_cat.csv'))
combined_cat = combined_cat$dummyfied %>%   select( - one_of('pat_id'))
combined_int = combined_ %>% select( one_of(config_$Column[c(selected_int)]))
#data_numeric <- as.data.frame(sapply(data, function(x) { as.numeric(as.character(x))}))
write_xgb_model <- function(xgb_model, dataset, results_dir="./") {
# write out model:
saveRDS(xgb_model, paste0(results_dir, "XGB_preliminary_model.rds"))
# VARIABLE IMPORTANCE -----------------------------------------------------
# variable importance for the single model ----------------------------------
importance_model = xgb.importance(feature_names = xgb_model$features,
model = xgb_model$learner.model)
# convert to numeric in order to use in detailed xgb.importance:
train_numeric = as.data.frame(
sapply(dataset$env$data, function(x) { as.numeric(as.character(x)) }))
detailed_imp = xgb.importance(
feature_names = xgb_model$features,
model = xgb_model$learner.model,
data = as.matrix(train_numeric),
label = train_numeric$label)
# write out:
write_csv(importance_model,
paste0(results_dir, "VI_XGB_freq_singlemodel.csv"))
write_csv(detailed_imp,
paste0(results_dir,"Detailed_VI_XGB_freq_singlemodel.csv"))
# generate variable importance for each fold of the CV:
# for(i in 1:length(res$models)) {
#   importance_fold <- xgb.importance(feature_names = res$models[[i]]$features,
#                                     model = res$models[[i]]$learner.model)
#   write_csv(importance_fold, paste0(importance_dir, "VI_XGB_freq_fold_", i, ".csv"))
# }
}
analyse_res_cv <- function(res, results_dir = "./") {
# make pr curve:
pr_curve <- perf_binned_perf_curve(pred = res$pred, bin_num = 100)
write_csv(pr_curve$curve,
paste0(results_dir, "PRCurve_XGB_3fold_freq_100_bins.csv"))
# ROCR pr curve:
perf_vs_thresh <- generateThreshVsPerfData(res$pred, measures = list(tpr, ppv))
plotROCCurves(perf_vs_thresh)
ggsave(paste0(results_dir, "ROC_XGB_3fold.png"), plot = last_plot())
write_csv(perf_vs_thresh$data,
paste0(results_dir, "ROCR_PRCurve_XGB_3fold_freq.csv"))
saveRDS(res, paste0(results_dir, "res_XGB_3fold.rds"))
# MEASURES ----------------------------------------------------------------
write_csv(res$measures.test, paste0(results_dir, "test_error_XGB_3fold.csv"))
}
make_var_name <- function(colnamelist) {
colnamelist = str_replace_all(colnamelist,' ','_')
colnamelist = str_replace_all(colnamelist,'-','_')
colnamelist = str_replace_all(colnamelist,'&','n')
colnamelist = str_replace_all(colnamelist,',','__')
colnamelist = str_replace(colnamelist,'\\(','_')
colnamelist = str_replace_all(colnamelist,'\\)','_')
colnamelist = str_replace_all(colnamelist,'\\/','_or_')
colnamelist = str_replace_all(colnamelist,'\\r','')
return( colnamelist )
}
data = cbind(combined_cat, combined_num, combined_int)
data$label = data$discontinue_flg_1_0
data$discontinue_flg_1_0 = NULL
data$label = as.factor(data$label)
table(data$label)
colnames_ = make_var_name(colnames(data))
colnames(data) = colnames_
dataset = makeClassifTask(id='full', data=data, target='label', positive=1)
lrn_xgb <- makeLearner(cl = "classif.xgboost", predict.type = "prob")
lrn_xgb$par.vals <- list(nrounds = 100,
verbose = TRUE,
objective = "binary:logistic")
# make resample object
rdesc <- makeResampleDesc(method = "CV", iters = 3)
# resample
res <- mlr::resample(learner = lrn_xgb, task = dataset, resampling = rdesc)
analyse_res_cv(res, results_dir = results_dir)
# train a single model
xgb_model <- train(learner = lrn_xgb, task = dataset)
write_xgb_model(xgb_model, results_dir = results_dir, dataset = dataset)
knitr::opts_chunk$set(echo = TRUE)
path = "D:/Results/"
models_dir = c('xgb_model_full','xgb_model_full_no_diff','xgb_model_no_post','xgb_model_no_post_no_diff','xgb_model_no_post_no_hcp','xgb_model_no_post_no_hcp_no_diff')
i=1
path_ = paste0("path", models_dir[i])
path_
path_ = paste0(path, models_dir[i])
path_ = paste0(path, models_dir[i])
path_
model_ = paste0(path_,'/XGB_preliminary_model.rds')
model_
model__ = paste0(path_,'/XGB_preliminary_model.rds')
model_ = readRDS(model__)
model_
model = readRDS(model__)
xgb.plot.tree(
plot_height = 1000,
model = model$learner.model,
n_first_tree = 0,
feature_names = model$features,
)
fname = paste0(path_,'/XGB_preliminary_model_tree.png')
ggsave(paste0(results_dir, "ROC_XGB_3fold.png"), plot = last_plot())
ggsave(fname, plot = last_plot())
fname
fname = paste0(path_,'XGB_preliminary_model_tree.png')
ggsave(fname, plot = last_plot())
xgb.plot.tree(
plot_height = 1000,
model = model$learner.model,
n_first_tree = 0,
feature_names = model$features,
)
fname = paste0(path_,'XGB_preliminary_model_tree.png')
ggsave(fname, plot = last_plot())
xgb.plot.tree(
plot_height = 1000,
model = model$learner.model,
n_first_tree = 0,
feature_names = model$features,
)
fname = paste0(path_,'XGB_preliminary_model_tree.png')
ggsave(fname, plot = last_plot())
i
xgb.dump(model$learner.model, with_stats = T)
tree_ = xgb.dump(model$learner.model, with_stats = T)
View(tree_)
head(tree_)
? xgb.dump
model$features
tree_ = xgb.dump(model$learner.model,
with_stats = T,
fmap = model$features)
head(tree_)
vignette("palabmod_dt")
head(tree_)
? head
head(tree_, n=100)
head(tree_, n=100)
model$features
model__ = paste0(path_,'XGB_preliminary_model_tree.txt')
write_csv(tree_, model__)
class(tree_)
write(tree_, file = model__)
model__
path_ = paste0(path, models_dir[i],'/')
model__ = paste0(path_,'XGB_preliminary_model_tree.txt')
write(tree_, file = model__)
model$features
fea_ = tibble(node=paste0(0:length(model$features)-1),
variable = model$features)
fea_ = tibble(node=paste0(0:length(model$features)),
variable = model$features)
fea_ = tibble(node=paste0(0:length(model$features)),
variable = c('root', model$features)
}
fea_ = tibble(node=paste0(0:length(model$features)),
variable = c('root', model$features))
View(fea_)
fea_ = tibble(node=paste0(1:length(model$features)),
variable = model$features)
config = read_csv("D:/Data/Processed/combined_date_config_validated.csv")
combined = readRDS("D:/Data/Processed/combined_date_data.rds")
config = read_csv("D:/Data/Processed/combined_date_config_validated.csv")
combined = readRDS("D:/Data/Processed/combined_date_data.rds")
combined$tec_up
table(combined$tec_up)
table(combined$tec_up, combined$discontinue_flg)
38/675
637/675
550/5067
colnames_ = colnames(combined)
indice = which ( colnames_ == "tec_up")
count_stat = plot_cond_density(combined,
var_index = indice,
target = combined$discontinue_flg,
target_label = 'discon',
description = desc_,
alpha_cut_off = 0.95, rm.zero = FALSE)
count_stat = plot_cond_density(combined,
var_index = indice,
target = combined$discontinue_flg,
target_label = 'discon',
description = 'tec-u', #config$Description[indice],
alpha_cut_off = 0.95, rm.zero = FALSE)
table(combined$discontinue_flg)
config$Description[indice]
count_stat = plot_cond_density(combined,
var_index = indice,
target = combined$discontinue_flg,
target_label = 'discon',
description = config$Description[indice],
alpha_cut_off = 0.95, rm.zero = FALSE)
indices = which ( colnames_ == "tec_up" | str_detect(colnames_,'flg'))
colnames_ = colnames(combined)
indices = which ( colnames_ == "tec_up" | str_detect(colnames_,'flg'))
count_stat = vector(mode = "list", length = length(indices))
colnames_[indices]
indices = which ( colnames_ == "tec_up" | str_detect(colnames_,'flg') ^ ! colnames_ != "discontinue_flg")
colnames_[indices]
indices = which ( colnames_ == "tec_up" | str_detect(colnames_,'flg') | ! colnames_ != "discontinue_flg")
colnames_[indices]
indices = setdiff(indices, which(colnames_ == "discontinue_flg"))
colnames_[indices]
count_stat = vector(mode = "list", length = length(indices))
for (j in 1:length(indices)) {
count_stat = plot_cond_density(combined,
var_index = indice[j],
target = combined$discontinue_flg,
target_label = 'discon',
description = config$Description[var_index],
alpha_cut_off = 0.95, rm.zero = FALSE)
eer_ = count_stat[[j]]$eer
fname = sprintf( "D:/Data/QC/univar_cond/main_biogen_explore_combined_data_datediff__cond_density__%s.png",colnames_[indice] )
ggsave(fname, plot = last_plot())
}
for (j in 1:length(indices)) {
count_stat = plot_cond_density(combined,
var_index = indices[j],
target = combined$discontinue_flg,
target_label = 'discon',
description = config$Description[var_index],
alpha_cut_off = 0.95, rm.zero = FALSE)
eer_ = count_stat[[j]]$eer
fname = sprintf( "D:/Data/QC/univar_cond/main_biogen_explore_combined_data_datediff__cond_density__%s.png",colnames_[indice] )
ggsave(fname, plot = last_plot())
}
debug(plot_cond_density)
count_stat = plot_cond_density(combined,
var_index = indices[j],
target = combined$discontinue_flg,
target_label = 'discon',
description = config$Description[var_index],
alpha_cut_off = 0.95, rm.zero = FALSE)
config$Description[var_index]
for (j in 1:length(indices)) {
var_index = indices[j]
count_stat = plot_cond_density(combined,
var_index = var_index,
target = combined$discontinue_flg,
target_label = 'discon',
description = config$Description[var_index],
alpha_cut_off = 0.95, rm.zero = FALSE)
eer_ = count_stat[[j]]$eer
fname = sprintf( "D:/Data/QC/univar_cond/main_biogen_explore_combined_data_datediff__cond_density__%s.png",colnames_[indice] )
ggsave(fname, plot = last_plot())
}
undebug(plot_cond_density)
for (j in 1:length(indices)) {
var_index = indices[j]
count_stat = plot_cond_density(combined,
var_index = var_index,
target = combined$discontinue_flg,
target_label = 'discon',
description = config$Description[var_index],
alpha_cut_off = 0.95, rm.zero = FALSE)
eer_ = count_stat[[j]]$eer
fname = sprintf( "D:/Data/QC/univar_cond/main_biogen_explore_combined_data_datediff__cond_density__%s.png",colnames_[indice] )
ggsave(fname, plot = last_plot())
}
j
indices
var_index
colnames_ = colnames(combined)
indices = which ( colnames_ == "tec_up" | str_detect(colnames_,'flg') )
indices = setdiff(indices, which(colnames_ == "discontinue_flg"))
colnames_[indices]
count_stat = vector(mode = "list", length = length(indices))
for (j in 1:length(indices)) {
var_index = indices[j]
config$Description[var_index]
count_stat = plot_cond_density(combined,
var_index = var_index,
target = combined$discontinue_flg,
target_label = 'discon',
description = config$Description[var_index],
alpha_cut_off = 0.95, rm.zero = FALSE)
eer_ = count_stat[[j]]$eer
fname = sprintf( "D:/Data/QC/univar_cond/main_biogen_explore_combined_data_datediff__cond_density__%s.png",colnames_[indice] )
ggsave(fname, plot = last_plot())
}
config$Description[var_index]
j
var_index = indices[j]
config$Description[var_index]
count_stat = plot_cond_density(combined,
var_index = var_index,
target = combined$discontinue_flg,
target_label = 'discon',
description = config$Description[var_index],
alpha_cut_off = 0.95, rm.zero = FALSE)
eer_ = count_stat[[j]]$eer
count_stat
count_stat = vector(mode = "list", length = length(indices))
count_stat
colnames_ = colnames(combined)
indices = which ( colnames_ == "tec_up" | str_detect(colnames_,'flg') )
indices = setdiff(indices, which(colnames_ == "discontinue_flg"))
colnames_[indices]
count_stat = vector(mode = "list", length = length(indices))
for (j in 1:length(indices)) {
var_index = indices[j]
config$Description[var_index]
count_stat[[j]] = plot_cond_density(combined,
var_index = var_index,
target = combined$discontinue_flg,
target_label = 'discon',
description = config$Description[var_index],
alpha_cut_off = 0.95, rm.zero = FALSE)
#eer_ = count_stat[[j]]$eer
fname = sprintf( "D:/Data/QC/univar_cond/main_biogen_explore_combined_data_datediff__cond_density__%s.png",colnames_[indice] )
ggsave(fname, plot = last_plot())
}
knitr::opts_chunk$set(echo = TRUE)
path = "D:/Results/"
models_dir = c('xgb_model_full','xgb_model_full_no_diff','xgb_model_no_post','xgb_model_no_post_no_diff','xgb_model_no_post_no_hcp','xgb_model_no_post_no_hcp_no_diff')
colnames_ = colnames(combined)
indices = which ( colnames_ == "tec_up" | str_detect(colnames_,'flg') )
indices = setdiff(indices, which(colnames_ == "discontinue_flg"))
colnames_[indices]
count_stat = vector(mode = "list", length = length(indices))
for (j in 1:length(indices)) {
var_index = indices[j]
config$Description[var_index]
count_stat[[j]] = plot_cond_density(combined,
var_index = var_index,
target = combined$discontinue_flg,
target_label = 'discon',
description = config$Description[var_index],
alpha_cut_off = 0.95, rm.zero = FALSE)
#eer_ = count_stat[[j]]$eer
fname = sprintf( "D:/Data/QC/univar_cond/main_biogen_explore_combined_data_datediff__cond_density__%s.png",colnames_[indice] )
ggsave(fname, plot = last_plot())
}
colnames_ = colnames(combined)
indices = which ( colnames_ == "tec_up" | str_detect(colnames_,'flg') )
indices = setdiff(indices, which(colnames_ == "discontinue_flg"))
colnames_[indices]
count_stat = vector(mode = "list", length = length(indices))
for (j in 1:length(indices)) {
var_index = indices[j]
config$Description[var_index]
count_stat[[j]] = plot_cond_density(combined,
var_index = var_index,
target = combined$discontinue_flg,
target_label = 'discon',
description = config$Description[var_index],
alpha_cut_off = 0.95, rm.zero = FALSE)
#eer_ = count_stat[[j]]$eer
fname = sprintf( "D:/Data/QC/univar_cond/main_biogen_explore_combined_data_datediff__cond_density__%s.png",colnames_[var_index] )
ggsave(fname, plot = last_plot())
}
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/npoh/Documents/Git/projects/Biogen_Tecf2017_round5/premodelling")
setwd("C:/Users/npoh/Documents/Git/projects/Biogen_Tecf2017_round5/premodelling")
rm(list = ls())
setwd("C:/Users/npoh/Documents/Git/projects/Biogen_Tecf2017_round5/premodelling")
library(palab)
library(palabmod)
library(ggplot2)
library(tidyverse)
library(stringr)
library(lubridate)
library(tictoc)
library(hashmap)
library(xgboost)
library(R.utils)
source("../lib/cut_linux.R")
source("../lib/mystat.R")
source('../lib/plot_cond_density.R')
source('../lib/remove_na.R')
results_dir = "D:/Data/Processed"
config = read_csv("D:/Data/Processed/combined_date_config_validated.csv")
combined = readRDS("D:/Data/Processed/combined_date_data.rds")
combined$effective_year_diff =  (mdy(combined$effective_year) - mdy(combined$idx_dt))/365.25
numUniqueValues = length(unique((combined$effective_year_diff)))
new_row = tibble(Column = 'effective_year_diff',
Type = 'numerical',
NumUniqueValues = numUniqueValues,
Description = 'Effecitve years of service',
isdate = FALSE,
var_grouping = "Physician Characteritics",
var_period = NA)
config = rbind(config, new_row)
dim(config)
dim(combined)
eer_table = read_csv('D:/Data/QC/num_eer_analysis.csv')
# eliminate var that is empty
var2remove = c('pre_concom_gpif_fst8','pre_concom_gpif_lst8','pre_medication_fst11','pre_medication_lst11','pre_medication_fst13','pre_medication_lst13','pre_concom_gpif_fst8_diff','pre_concom_gpif_lst8_diff','pre_medication_fst11_diff','pre_medication_lst11_diff','pre_medication_fst13_diff','pre_medication_lst13_diff','pre_script_fst_diff','pre_script_lst_dayssup_diff','post_script_lst_dayssup_diff','pre_concom_gpif_num8','pre_medication_num11','pre_medication_num13','pre_concom_ndc_fst4_diff','pre_concom_ndc_lst4_diff')
# eliminate variables based on others type
config$Type[config$Column=='npi'] = 'others'
config$Type[config$Column=='pat_id'] = 'key'
config$Type[config$Column=='yob'] = 'others'
config$Type[config$Column=='yomsg'] = 'others'
config$Type[config$Column=='first_tec_rx'] = 'others'
config$Type[config$Column=='effective_year'] = 'others'
config$var_grouping[ config$Column=='pat_id'] = '' # added this in as the var_grouping info is wrong!
var_others = config$Column[config$Type=='others']
length(var_others)
# EER and number of positivie criteria
table.eliminate = eer_table %>% filter( (eer <0.04 |  `# pos`<=10 ) )
# should get 123
length(unique(  c(table.eliminate$Column, var2remove)))
var2eliminate = unique(  c(table.eliminate$Column, var2remove, var_others) )
length(var2eliminate)
config_ = config %>% filter( !(Column %in% var2eliminate  ))
combined_ = combined %>% select( -one_of(var2eliminate))
length(config$Column)
length(config_$Column)
dim(combined_)
dim(config_)
dim(combined)
dim(config)
dim(combined_)
dim(config_)
saveRDS(combined_, paste0(results_dir,'combined_date_322fea_data.rds'))
saveRDS(config_, paste0(results_dir,'combined_date_322fea_config.rds'))
results_dir = "D:/Data/Processed/"
dim(combined_)
dim(config_)
saveRDS(combined_, paste0(results_dir,'combined_date_322fea_data.rds'))
saveRDS(config_, paste0(results_dir,'combined_date_322fea_config.rds'))
