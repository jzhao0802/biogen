library(XML)
install.packages("XML")
library(XML)
xgb.plot.tree(feature_names = names((Icecream[,-1])), model = bst)
results_vi_table(lrn_outer_model, dataset)
pred_outer <- predict(lrn_outer_trained, dataset)
perf_plot_pr_curve(pred_outer)
vignette(package="palabmod")
browseVignettes("palabmod")
library(mlr)
cars <- datasets::mtcars
View(cars)
cars$Lemon <- rep(c(1,0,1,0), 8)
cars$Lemon
?makeLearner
?makeResampleDesc
rdesc <- makeResampleDesc(method = "CV", iters = 3)
?resample
rdesc <- makeResampleDesc(method = "CV", iters = 3, stratify = TRUE)
res <- resample(learner = lrn_xgb, task = dataset, resampling = rdesc)
lrn_xgb <- makeLearner(cl = "classif.xgboost", predict.type = "prob")
dataset <- makeClassifTask(id = "Lemon_XGBoost", data = cars, target = "Lemon",
positive = 1)
lrn_xgb <- makeLearner(cl = "classif.xgboost", predict.type = "prob")
rdesc <- makeResampleDesc(method = "CV", iters = 3, stratify = TRUE)
res <- resample(learner = lrn_xgb, task = dataset, resampling = rdesc)
dataset <- makeClassifTask(id = "Lemon_XGBoost", data = cars, target = "Lemon",
positive = 1)
cars_num <- as.data.frame(sapply(cars, function(x) { as.numeric(as.character(x)) } ))
dataset <- makeClassifTask(id = "Lemon_XGBoost", data = cars, target = "Lemon",
positive = 1)
dataset <- makeClassifTask(id = "Lemon_XGBoost", data = cars_num, target = "Lemon",
positive = 1)
dataset <- makeClassifTask(id = "Lemon_XGBoost", data = cars_num, target = "Lemon",
positive = 1)
sapply(cars_num, class)
dataset <- makeClassifTask(id = "Lemon_XGBoost", data = cars_num, target = "Lemon",
positive = 1)
dataset <- makeClassifTask(id = "Lemon_XGBoost", data = cars_num, target = "Lemon",
positive = 1)
View(cars_num)
rm(list = ls())
cars_num <- as.data.frame(sapply(cars, function(x) { as.numeric(as.character(x)) } ))
sapply(cars_num, class)
cars <- datasets::mtcars
cars_num <- as.data.frame(sapply(cars, function(x) { as.numeric(as.character(x)) } ))
sapply(cars_num, class)
cars$Lemon <- rep(c(1,0,1,0), 8)
cars_num <- as.data.frame(sapply(cars, function(x) { as.numeric(as.character(x)) } ))
cars_num$Lemon <- as.factor(cars_num$Lemon)
cars_num$Lemon
dataset <- makeClassifTask(id = "Lemon_XGBoost", data = cars_num, target = "Lemon",
positive = 1)
lrn_xgb <- makeLearner(cl = "classif.xgboost", predict.type = "prob")
res <- resample(learner = lrn_xgb, task = dataset, resampling = rdesc)
rdesc <- makeResampleDesc(method = "CV", iters = 3)
res <- resample(learner = lrn_xgb, task = dataset, resampling = rdesc)
library(palabmod)
pr_curve <- perf_binned_perf_curve(pred = res$pred)
pr_curve$curve
?train
xgb_model <- train(learner = lrn_xgb,
task = dataset)
xgb_model$task.desc
xgb_model$features
pred <- predict(object = xgb_model, newdata = cars_num)
pred$predict.type
pred$data
pred$threshold
lrn_xgb <- makeLearner(cl = "classif.xgboost", predict.type = "prob")
exit
bye
quit
knitr::opts_chunk$set(echo = TRUE)
data_dir = "../data/features/"
data_dir = "../data/features_small/"
files <- list.files(data_dir)
files
files
setwd("C:/Users/npoh/Documents/Git/projects/bi/modelling")
library(palab)
library(palabmod)
library(ggplot2)
library(tidyverse)
library(stringr)
library(lubridate)
? var_config_generator
files
data_dir = "../data/features/"
data_dir = "../data/features_small/"
files <- list.files(data_dir)
files
?select
? one_of
? mutate
? rename
knitr::opts_chunk$set(echo = TRUE)
#setwd("C:/Users/npoh/Documents/Git/projects/bi/modelling")
#setwd("F:/Norman/BI_IPF2017/modelling")
library(palab)
library(palabmod)
library(ggplot2)
library(tidyverse)
library(stringr)
library(lubridate)
library(mlr)
run_on_server <- FALSE
setwd("C:/Users/npoh/Documents/Git/projects/bi/modelling")
load_data_with_config <- TRUE
if (load_data_with_config) {
config <- read_csv("bi_features_var_config.csv")
} else {
# 1. Add key -- otherwise the file won't load
config$Type[ str_detect(config$Column, "^patient_id$") ] = "key"
# We shall not carry out step 2 below because xgboost can only take numerical data !!!
# 2. Change the flag to categorical
# matching <- str_detect(config$Column,"_FLAG$")
# config$Type[matching]="categorical"
#
# matching <- str_detect(config$Column,"_BEFORE$")
# config$Type[matching]="categorical"
#
# matching <- str_detect(config$Column,"_AFTER$")
# config$Type[matching]="categorical"
#
# matching <- str_detect(config$Column,"^label$")
# config$Type[matching]="categorical"
#
write_csv(config,"bi_features_var_config.csv")
}
files
if (run_on_server) {
data_dir = ""
files <- c(
"F:/Hui/Project_2016/BI_IPF_2016/04_Summary/004_data/all_features_neg.csv",
"F:/Hui/Project_2016/BI_IPF_2016/04_Summary/004_data/all_features_pos.csv")
} else {
data_dir = "../data/features/"
files <- list.files(data_dir)
files
}
files
run_on_server <- TRUE
load_data_with_config <- TRUE
if (run_on_server) {
setwd("F:/Norman/BI_IPF2017/modelling")
} else {
setwd("C:/Users/npoh/Documents/Git/projects/bi/modelling")
}
run_on_server <- TRUE
load_data_with_config <- TRUE
if (run_on_server) {
setwd("F:/Norman/BI_IPF2017/modelling")
} else {
setwd("C:/Users/npoh/Documents/Git/projects/bi/modelling")
}
getwd()
? vector
? sample
sample(100)
sort(sample(100))
rm (bi)
? match
letters
LETTERS
1:10 %in% c(1,3,5,9)
sstr <- c("c","ab","B","bba","c",NA,"@","bla","a","Ba","%")
sstr[sstr %in% c(letters, LETTERS)]
c(letters, LETTERS)
sstr
charmatch("med", c("mean", "median", "mode"))
charmatch("m",   c("mean", "median", "mode"))
charmatch("me", c("mean", "median", "mode"))
charmatch("1", c("mean", "median", "mode"))
charmatch("m", c("mean", "median", "mode"))
charmatch("mo", c("mean", "median", "mode"))
charmatch("an", c("mean", "median", "mode"))
? sprintf
require(stats); require(graphics)
deparse(args(lm))
args(lm)
? args
lm
27*60+48
21*60+58
28*60
950-260
1668 - 1318
53*60+15
61*60
61*60
103*60
6185-3195
(6185-3195)/60
31*60
31*60+19
35*60+24
42*60
42*60+11
42*60+26
51*60+21
13*60+24
23*60+16
kfold
??kfold
?? kfold
?? disdat
install.packages("disdat")
install.packages("dismo")
library(dismo)
install.packages("raster")
library(dismo)
install.packages("sp")
library(dismo)
?kfold
x=1:10
x
kfold(x,2)
kfold(100,2)
kfold(100,5)
dismo::kfold
combined_date_config = read_csv("D:/Data/Processed/combined_date_config_validated.csv")
rm(list = ls())
setwd("L:/modelling")
library(palab)
library(palabmod)
library(ggplot2)
library(tidyverse)
library(stringr)
library(lubridate)
library(tictoc)
library(hashmap)
library(xgboost)
library(R.utils)
sourceDirectory("../lib")
combined_date_config = read_csv("D:/Data/Processed/combined_date_config_validated.csv")
combined_date_data = readRDS("D:/Data/Processed/combined_date_data.rds")
#varlist = c('pre_medication_num4','pre_concom_cdes_num1','pre_concom_ndc_num2','pre_medication_num7','pre_concom_ndc_num4','pre_concom_ndc_num5','pre_concom_ndc_num6','pre_medication_num11','pre_medication_num12')
#remove tecfidera pre_concom_ndc_num4
varlist = c('pre_medication_num4','pre_concom_cdes_num1','pre_concom_ndc_num2','pre_medication_num7','pre_concom_ndc_num5','pre_concom_ndc_num6','pre_medication_num11','pre_medication_num12')
data_row_sum = combined_date_data %>% select(one_of(varlist)) %>%
replace(is.na(.), 0)  %>% rowSums
#get the first date variable and apply min
varlist_diff = str_replace(varlist,'num','fst')
varlist_diff = paste0(varlist_diff,'_diff')
data_ = combined_date_data %>% select(one_of(varlist_diff))
data_row_min <- apply(data_, 1, function(x) {min(x, na.rm=TRUE)} )
#get the last date variable and apply max
varlist_diff = str_replace(varlist,'num','lst')
varlist_diff = paste0(varlist_diff,'_diff')
data_ = combined_date_data %>% select(one_of(varlist_diff))
data_row_max <- apply(data_, 1, function(x) {max(x, na.rm=TRUE)} )
data_row_max = remove_inf(data_row_max)
data_row_min = remove_inf(data_row_min)
data_ = tibble(pre_dmt_num = data_row_sum, pre_dmt_fst_diff = data_row_min,
pre_dmt_lst_diff = data_row_max)
numUniqueValues = tibble(value = sapply(data_, function(x) {length(unique((x)))}))
new_row = tibble(Column = colnames(data_),
Type='numerical',
NumUniqueValues=numUniqueValues$value,
var_period = "pre",
var_grouping = "Medications - MS Related (DMTs)",
isdate=FALSE,
Description = c('Total prescribed DMT pre index','Day difference between index and first date of DMT prescription in preindex period', 'Day difference between index and last date of DMT prescription in preindex period')
)
combined_date_config = rbind(combined_date_config, new_row)
combined_date_data = cbind(combined_date_data,data_)
combined_date_config = config_with_colnames(combined_date_config,
colnameslist=colnames(combined_date_data))
dim(combined_date_config)
dim(combined_date_data)
combined_date_data$pre_ae_fst1_diff
remove_na(combined_date_data$pre_ae_fst1_diff)
remove_na(combined_date_data$pre_ae_lst1_diff)
data_
remove_na(combined_date_data$pre_dmt_fst_diff)
combined$effective_year_diff =  as.numeric((mdy(combined$effective_year) - mdy(combined$idx_dt))/365.25)
combined_date_data$effective_year
combined_date_data$effective_year_diff =  as.numeric((mdy(combined_date_data$effective_year) - mdy(combined_date_data$idx_dt))/365.25)
numUniqueValues = length(unique((combined_date_data$effective_year_diff)))
config_row = tibble(Column = 'effective_year_diff',
Type = 'numerical',
NumUniqueValues = numUniqueValues,
Description = 'Effecitve years of service',
isdate = FALSE,
var_grouping = "Physician Characteritics",
var_period = NA)
combined_date_config = rbind(combined_date_config, config_row)
dim(config)
dim(combined_date_config)
dim(combined_date_data)
combined_date_config = config_with_colnames(combined_date_config,
colnameslist=colnames(combined_date_data))
dim(combined_date_config)
dim(combined_date_data)
# vars of Type others are to be ignored
others_var = c('npi', 'yob', 'yomsg', 'first_tec_rx', 'effective_year')
config$Type[config$Column %in% others_var] = 'others'
# vars of Type others are to be ignored
others_var = c('npi', 'yob', 'yomsg', 'first_tec_rx', 'effective_year')
combined_date_config$Type[combined_date_config$Column %in% others_var] = 'others'
# key is to be removed prior to modelling
combined_date_config$Type[combined_date_config$Column=='pat_id'] = 'key'
# so as ID
combined_date_config$var_grouping[ combined_date_config$Column=='pat_id'] = 'id'
# correct the period variable -- since post-index variables are to be removed later on
post_var = c('tec_up','copay_tecfidera','copay_avg_norm')
combined_date_config$var_period[combined_date_config$Column %in% post_var] = 'post'
saveRDS(combined_date_config, "D:/Data/Processed/combined_date_config_validated.rds")
saveRDS(combined_date_data, "D:/Data/Processed/combined_date_data.rds")
write_csv(combined_date_data,"D:/Data/Processed/combined_date_data.csv")
write_csv(combined_date_config,"D:/Data/Processed/combined_date_config_validated.csv")
rm(list = ls())
setwd("L:/modelling")
library(palab)
library(palabmod)
library(ggplot2)
library(tidyverse)
library(stringr)
library(lubridate)
library(tictoc)
library(hashmap)
library(xgboost)
library(R.utils)
sourceDirectory("../lib")
results_dir = "D:/Results/modelling/xgb_universe_full/"
mkdirs(results_dir)
config = read_csv("D:/Data/Processed/combined_date_config_validated.csv")
combined = readRDS("D:/Data/Processed/combined_date_data.rds")
knitr::opts_chunk$set(echo = TRUE)
sourceDirectory("../lib")
results_dir = "D:/Data/Processed/"
config = read_csv("D:/Data/Processed/combined_date_config_validated.csv")
combined = readRDS("D:/Data/Processed/combined_date_data.rds")
combined$effective_year_diff
eer_table = read_csv('D:/Data/QC/num_eer_analysis.csv')
# eliminate var that is empty
var2remove = c('pre_concom_gpif_fst8','pre_concom_gpif_lst8','pre_medication_fst11','pre_medication_lst11','pre_medication_fst13','pre_medication_lst13','pre_concom_gpif_fst8_diff','pre_concom_gpif_lst8_diff','pre_medication_fst11_diff','pre_medication_lst11_diff','pre_medication_fst13_diff','pre_medication_lst13_diff','pre_script_fst_diff','pre_script_lst_dayssup_diff','post_script_lst_dayssup_diff','pre_concom_gpif_num8','pre_medication_num11','pre_medication_num13','pre_concom_ndc_fst4_diff','pre_concom_ndc_lst4_diff')
# eliminate variables based on others type
config$Type[config$Column=='npi'] = 'others'
config$Type[config$Column=='pat_id'] = 'key'
config$Type[config$Column=='yob'] = 'others'
config$Type[config$Column=='yomsg'] = 'others'
config$Type[config$Column=='first_tec_rx'] = 'others'
config$Type[config$Column=='effective_year'] = 'others'
config$var_grouping[ config$Column=='pat_id'] = '' # added this in as the var_grouping info is wrong!
var_others = config$Column[config$Type=='others']
length(var_others)
# EER and number of positivie criteria
table.eliminate = eer_table %>% filter( (eer <0.04 |  `# pos`<=10 ) )
# should get 123
length(unique(  c(table.eliminate$Column, var2remove)))
var2eliminate = unique(  c(table.eliminate$Column, var2remove, var_others) )
length(var2eliminate)
config_ = config %>% filter( !(Column %in% var2eliminate  ))
combined_ = combined %>% select( -one_of(var2eliminate))
config_ = config %>% filter( !(Column %in% var2eliminate  ))
combined_ = combined %>% select( -one_of(var2eliminate))
combined
combined = readRDS("D:/Data/Processed/combined_date_data.rds")
combined
combined_date_config = read_csv("D:/Data/Processed/combined_date_config_validated.csv")
combined_date_data = readRDS("D:/Data/Processed/combined_date_data.rds")
combined_date_data
dim(combined_date_data)
#varlist = c('pre_medication_num4','pre_concom_cdes_num1','pre_concom_ndc_num2','pre_medication_num7','pre_concom_ndc_num4','pre_concom_ndc_num5','pre_concom_ndc_num6','pre_medication_num11','pre_medication_num12')
#remove tecfidera pre_concom_ndc_num4
varlist = c('pre_medication_num4','pre_concom_cdes_num1','pre_concom_ndc_num2','pre_medication_num7','pre_concom_ndc_num5','pre_concom_ndc_num6','pre_medication_num11','pre_medication_num12')
data_row_sum = combined_date_data %>% select(one_of(varlist)) %>%
replace(is.na(.), 0)  %>% rowSums
#get the first date variable and apply min
varlist_diff = str_replace(varlist,'num','fst')
varlist_diff = paste0(varlist_diff,'_diff')
data_ = combined_date_data %>% select(one_of(varlist_diff))
data_row_min <- apply(data_, 1, function(x) {min(x, na.rm=TRUE)} )
#get the last date variable and apply max
varlist_diff = str_replace(varlist,'num','lst')
varlist_diff = paste0(varlist_diff,'_diff')
data_ = combined_date_data %>% select(one_of(varlist_diff))
data_row_max <- apply(data_, 1, function(x) {max(x, na.rm=TRUE)} )
data_row_max = remove_inf(data_row_max)
data_row_min = remove_inf(data_row_min)
data_ = tibble(pre_dmt_num = data_row_sum, pre_dmt_fst_diff = data_row_min,
pre_dmt_lst_diff = data_row_max)
numUniqueValues = tibble(value = sapply(data_, function(x) {length(unique((x)))}))
new_row = tibble(Column = colnames(data_),
Type='numerical',
NumUniqueValues=numUniqueValues$value,
var_period = "pre",
var_grouping = "Medications - MS Related (DMTs)",
isdate=FALSE,
Description = c('Total prescribed DMT pre index','Day difference between index and first date of DMT prescription in preindex period', 'Day difference between index and last date of DMT prescription in preindex period')
)
combined_date_config = rbind(combined_date_config, new_row)
combined_date_data = cbind(combined_date_data,data_)
combined_date_config = config_with_colnames(combined_date_config,
colnameslist=colnames(combined_date_data))
dim(combined_date_config)
dim(combined_date_data)
combined_date_data$effective_year_diff =  as.numeric((mdy(combined_date_data$effective_year) - mdy(combined_date_data$idx_dt))/365.25)
numUniqueValues = length(unique((combined_date_data$effective_year_diff)))
config_row = tibble(Column = 'effective_year_diff',
Type = 'numerical',
NumUniqueValues = numUniqueValues,
Description = 'Effecitve years of service',
isdate = FALSE,
var_grouping = "Physician Characteritics",
var_period = NA)
combined_date_config = rbind(combined_date_config, config_row)
combined_date_config = config_with_colnames(combined_date_config,
colnameslist=colnames(combined_date_data))
dim(combined_date_config)
dim(combined_date_data)
# vars of Type others are to be ignored
others_var = c('npi', 'yob', 'yomsg', 'first_tec_rx', 'effective_year')
combined_date_config$Type[combined_date_config$Column %in% others_var] = 'others'
# key is to be removed prior to modelling
combined_date_config$Type[combined_date_config$Column=='pat_id'] = 'key'
# so as ID
combined_date_config$var_grouping[ combined_date_config$Column=='pat_id'] = 'id'
# correct the period variable -- since post-index variables are to be removed later on
post_var = c('tec_up','copay_tecfidera','copay_avg_norm')
combined_date_config$var_period[combined_date_config$Column %in% post_var] = 'post'
saveRDS(combined_date_config, "D:/Data/Processed/combined_date_config_validated.rds")
saveRDS(combined_date_data, "D:/Data/Processed/combined_date_data.rds")
write_csv(combined_date_data,"D:/Data/Processed/combined_date_data.csv")
write_csv(combined_date_config,"D:/Data/Processed/combined_date_config_validated.csv")
config = read_csv("D:/Data/Processed/combined_date_config_validated.csv")
combined = readRDS("D:/Data/Processed/combined_date_data.rds")
dim(combined)
combined$pat_id
eer_table = read_csv('D:/Data/QC/num_eer_analysis.csv')
# eliminate var that is empty
var2remove = c('pre_concom_gpif_fst8','pre_concom_gpif_lst8','pre_medication_fst11','pre_medication_lst11','pre_medication_fst13','pre_medication_lst13','pre_concom_gpif_fst8_diff','pre_concom_gpif_lst8_diff','pre_medication_fst11_diff','pre_medication_lst11_diff','pre_medication_fst13_diff','pre_medication_lst13_diff','pre_script_fst_diff','pre_script_lst_dayssup_diff','post_script_lst_dayssup_diff','pre_concom_gpif_num8','pre_medication_num11','pre_medication_num13','pre_concom_ndc_fst4_diff','pre_concom_ndc_lst4_diff')
# eliminate variables based on others type
config$Type[config$Column=='npi'] = 'others'
config$Type[config$Column=='pat_id'] = 'key'
config$Type[config$Column=='yob'] = 'others'
config$Type[config$Column=='yomsg'] = 'others'
config$Type[config$Column=='first_tec_rx'] = 'others'
config$Type[config$Column=='effective_year'] = 'others'
config$var_grouping[ config$Column=='pat_id'] = '' # added this in as the var_grouping info is wrong!
var_others = config$Column[config$Type=='others']
length(var_others)
# EER and number of positivie criteria
table.eliminate = eer_table %>% filter( (eer <0.04 |  `# pos`<=10 ) )
# should get 123
length(unique(  c(table.eliminate$Column, var2remove)))
var2eliminate = unique(  c(table.eliminate$Column, var2remove, var_others) )
length(var2eliminate)
config_ = config %>% filter( !(Column %in% var2eliminate  ))
table.eliminate = eer_table %>% filter( (eer <0.04 |  `# pos`<=10 ) )
length(unique(  c(table.eliminate$Column, var2remove)))
var2eliminate = unique(  c(table.eliminate$Column, var2remove, var_others) )
length(var2eliminate)
config_ = config %>% filter( !(Column %in% var2eliminate  ))
combined_ = combined %>% select( -one_of(var2eliminate))
View(combined)
class(combined)
combined = as_tibble(combined)
var2eliminate
var2keep = setdiff(colname(combined), var2eliminate)
var2keep = setdiff(colnames(combined), var2eliminate)
var2keep
combined_ = combined %>% select( one_of(var2keep))
var2keep = unique(setdiff(colnames(combined), var2eliminate))
combined_ = combined %>% select( one_of(var2keep))
colnames_ = colnames(combined)
duplicated(colnames_)
sum(duplicated(colnames_))
which(duplicated(colnames_))
combined[,which(duplicated(colnames_))]=NULL
combined[,which(duplicated(colnames_))]=NULL
var2keep = unique(setdiff(colnames(combined), var2
)
))
combined_ = combined %>% select( -one_of(var2eliminate))
length(config$Column)
length(config_$Column)
dim(combined_)
dim(config_)
config = read_csv("D:/Data/Processed/combined_date_config_validated.csv")
combined = readRDS("D:/Data/Processed/combined_date_data.rds")
dim(combined)
dim(config)
colnames(combined)
colnames_ = colnames(combined)
combined[,which(duplicated(colnames_))]=NULL
config[which(duplicated(colnames_)),]=NULL
dim(combined)
dim(config)
which(duplicated(colnames_))
config
dim(config)
config = config[-which(duplicated(colnames_)),]
dim(combined)
dim(config)
knitr::opts_chunk$set(echo = TRUE)
config = config_with_colnames(config,
colnameslist=colnames(combined))
sourceDirectory("../lib")
config = config_with_colnames(config,
colnameslist=colnames(combined))
setwd("L:/premodelling")
setwd("L:/premodelling")
sourceDirectory("../lib")
config = config_with_colnames(config, colnameslist=colnames(combined))
sourceDirectory("../lib")
cd ..
? config_with_colname
? config_with_colnames
config = config_with_colnames(config, colnameslist=colnames(combined))
